# create a secret
oc create secret generic secret-name --from-literal key1=secret1 --from-literal key2=secret2

# update pod service to allow secret to be mounted
oc secrets add --for mount serviceaccount/serviceaccount-name secret/secret-name

# exposing secrets to pods
oc create secret generic demo-secret --from-literal username=demo-user --from-literal root_password=xYz

# edit deployment config
#     env:
#	- name: MYSQL_ROOT_PASSWORD
#	  valueFrom:
#	    secretKeyRef:
#	      name: demo-secret
#	      key: root_password

# or use set env
oc set env dc/demo --from=secret/demo-secret

# create a volume mount in the pod
oc set volume dc/demo \
	--add --type=secret --secret-name=demo-secret --mount-path=/app-secrets

# create a secret for mysql
oc create secret generic mysql \
  	--from-literal user=myuser --from-literal password=redhat123 \
  	--from-literal database=test_secrets --from-literal hostname=mysql 

# create a deployment to use these secrets
oc new-app --name mysql \
  	--docker-image registry.access.redhat.com/rhscl/mysql-57-rhel7:5.7-47

# this will put the pod in CrashLoopBackOff as it needs env to be defined
# the env needed for this pod is MYSQL_USER, MYSQL_PASSWORD, and MYSQL_DATABASE
# set env as (remember the lowercase env keys are made UPPERCASE when setting)
oc set env dc/mysql --prefix MYSQL_ --from secret/mysql

# now mysql deployment should be running!
# verify databases
oc rsh mysql-2-XXXXX
> mysql -u myuser --password=redhat123 test_secrets -e 'show databases;'



